( int , Int )
( a , Identifier )
( ; , Semicolon )
( int , Int )
( b , Identifier )
( [ , LSbrace )
( 2 , Number )
( ] , RSbrace )
( ; , Semicolon )
( int , Int )
( c , Identifier )
( [ , LSbrace )
( 2 , Number )
( ] , RSbrace )
( [ , LSbrace )
( 4 , Number )
( ] , RSbrace )
( ; , Semicolon )
( int , Int )
( func , Identifier )
( ( , Lparen )
( int , Int )
( n , Identifier )
( ) , Rparen )
( { , LCbrace )
( int , Int )
( d , Identifier )
( [ , LSbrace )
( 3 , Number )
( ] , RSbrace )
( ; , Semicolon )
( d , Identifier )
( [ , LSbrace )
( 1 , Number )
( ] , RSbrace )
( = , Assign )
( n , Identifier )
( ; , Semicolon )
( a , Identifier )
( = , Assign )
( d , Identifier )
( [ , LSbrace )
( 1 , Number )
( ] , RSbrace )
( ; , Semicolon )
( if , If )
( ( , Lparen )
( a , Identifier )
( == , Equal )
( 2 , Number )
( ) , Rparen )
( { , LCbrace )
( b , Identifier )
( [ , LSbrace )
( 1 , Number )
( ] , RSbrace )
( = , Assign )
( 3 , Number )
( ; , Semicolon )
( } , RCbrace )
( else , Else )
( { , LCbrace )
( b , Identifier )
( [ , LSbrace )
( 1 , Number )
( ] , RSbrace )
( = , Assign )
( 5 , Number )
( ; , Semicolon )
( } , RCbrace )
( return , Return )
( 0 , Number )
( ; , Semicolon )
( } , RCbrace )
( int , Int )
( main , Identifier )
( ( , Lparen )
( ) , Rparen )
( { , LCbrace )
( int , Int )
( c , Identifier )
( ; , Semicolon )
( func , Identifier )
( ( , Lparen )
( 2 , Number )
( ) , Rparen )
( ; , Semicolon )
( if , If )
( ( , Lparen )
( b , Identifier )
( [ , LSbrace )
( 1 , Number )
( ] , RSbrace )
( == , Equal )
( 3 , Number )
( ) , Rparen )
( { , LCbrace )
( c , Identifier )
( = , Assign )
( 4 , Number )
( ; , Semicolon )
( } , RCbrace )
( else , Else )
( { , LCbrace )
( c , Identifier )
( = , Assign )
( 0 , Number )
( ; , Semicolon )
( } , RCbrace )
( return , Return )
( c , Identifier )
( ; , Semicolon )
( } , RCbrace )

